# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go
name: Sheffessions pipeline 

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache-dependency-path: subdir/go.sum

    - name: Fetch dependencies
      working-directory: ./backend/sheffessions_api
      run: go get -v ./...

    - name: Run tests
      working-directory: ./backend/sheffessions_api
      run: go test -v .

  test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18' # You can set this to your project's Node.js version

    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: ~/.pnpm-cache
        key: ${{ runner.OS }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.OS }}-pnpm-

    - name: Install dependencies
      working-directory: ./frontend/sheffessions
      run: pnpm install
    
    - name: Run frontend tests
      working-directory: ./frontend/sheffessions
      run: pnpm test
        
  deploy:
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Authenticate with GCP
      run: echo "$GOOGLE_APPLICATION_CREDENTIALS" | gcloud auth activate-service-account --key-file=-
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        project_id: sheffessions
        service_account_key: ${{ secrets.GCP_CREDENTIALS }}
        export_default_credentials: true

    - name: Deploy to App Engine via Cloud Build
      id: deploy
      run: |
        gcloud builds submit backend/sheffessions_api --config backend/sheffessions_api/cloudbuild.yaml
      continue-on-error: true  # Allow subsequent steps to run even if this step fails

    - name: Rollback if deployment failed
      if: steps.deploy.outcome == 'failure'
      run: |
        echo "Deployment failed. Rolling back to the previous version."
        PREVIOUS_VERSION=$(gcloud app versions list --sort-by=~LAST_DEPLOYED --limit=2 | awk 'NR==2{print $2}')
        gcloud app versions migrate $PREVIOUS_VERSION
