name: Sheffessions pipeline 

on:
  push:
    branches: [
      "main",
      "feature/productiondeployments"
    ]

jobs:
  production-build-sheffessions_api:
    runs-on: ubuntu-latest
    outputs:
      image_tag_sheffessions_api: ${{ steps.generate_tag.outputs.image_tag_sheffessions_api }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS_PRODUCTION }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      - name: 'Configure Docker for Artifact Registry'
        run: |
          gcloud --quiet auth configure-docker europe-docker.pkg.dev

      - name: Generate image tag
        id: generate_tag
        run: |
          echo "IMAGE_TAG_SHEFFESSIONS_API=${GITHUB_SHA}-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: 'Build and push Docker image'
        working-directory: ./backend/sheffessions_api
        run: |
          docker build \
            -t europe-docker.pkg.dev/sheffessions/sheffessions-docker-repository/sheffessions_api:sheffessions_api-${{ steps.generate_tag.outputs.image_tag_sheffessions_api }} .
          docker push europe-docker.pkg.dev/sheffessions/sheffessions-docker-repository/sheffessions_api:sheffessions_api-${{ steps.generate_tag.outputs.image_tag_sheffessions_api }}

  production-build-sheffessions_fe:
    runs-on: ubuntu-latest
    outputs:
      image_tag_sheffessions_fe: ${{ steps.generate_tag.outputs.image_tag_sheffessions_fe}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS_PRODUCTION }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      - name: 'Configure Docker for Artifact Registry'
        run: |
          gcloud --quiet auth configure-docker europe-docker.pkg.dev

      - name: Generate image tag
        id: generate_tag
        run: |
          echo "IMAGE_TAG_SHEFFESSIONS_FE=${GITHUB_SHA}-$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: 'Build and push Docker image'
        working-directory: ./frontend/sheffessions
        run: |
          docker build \
            --build-arg NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL_PRODUCTION }} \
            -t europe-docker.pkg.dev/sheffessions/sheffessions-docker-repository/sheffessions_fe:sheffessions_fe-${{ steps.generate_tag.outputs.image_tag_sheffessions_fe}} .
          docker push europe-docker.pkg.dev/sheffessions/sheffessions-docker-repository/sheffessions_fe:sheffessions_fe-${{ steps.generate_tag.outputs.image_tag_sheffessions_fe }}

  production-database-migrations:
    runs-on: ubuntu-latest
    needs: [
      production-build-sheffessions_api,
      production-build-sheffessions_fe
    ]
    env:
      POSTGRESQL_PASSWORD_STAGING: ${{ secrets.POSTGRESQL_PASSWORD_PRODUCTION }}
      POSTGRESQL_URL: postgres://postgres:${{ secrets.POSTGRESQL_PASSWORD_PRODUCTION }}@localhost:5432/postgres?sslmode=disable
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS_PRODUCTION }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      - name: 'Check Instance on Cloud SQL exists and update db password'
        run: |
          INSTANCE_EXISTS=$(gcloud sql instances list --filter="name:sheffessions-postgresql" --format="get(name)")

          if [[ -z "$INSTANCE_EXISTS" ]]; then
            # gcloud sql instances create sheffessions-staging-postgresql \
            #   --project=sheffessions-staging \
            #   --database-version=POSTGRES_15 \
            #   --tier=db-f1-micro \
            #   --region=europe-west2 \
            #   --availability-type=zonal \
            #   --storage-type=SSD \
            #   --storage-size=10 \
            #   --storage-auto-increase \
            #   --backup \
            #   --backup-start-time=04:00 \
            #   --require-ssl
            gcloud sql users set-password postgres --instance=sheffessions-postgresql --password=${POSTGRESQL_PASSWORD_PRODUCTION}
          else
            echo "Instance sheffessions-staging-postgresql already exists."
            echo "Skipping creation."
            echo "Updating password to POSTGRESQL_PASSWORD_STAGING"
            gcloud sql users set-password postgres --instance=sheffessions-postgresql --password=${POSTGRESQL_PASSWORD_PRODUCTION}
          fi

      - name: 'Construct POSTGRESQL_URL and Run sheffessions_api'
        working-directory: ./backend/sheffessions_api
        run: |
          wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
          chmod +x cloud_sql_proxy
          ./cloud_sql_proxy -instances=sheffessions:europe-west2:sheffessions-postgresql=tcp:5432 &

          echo "Waiting for Cloud SQL Proxy to be up..."
          for i in {1..30}; do
            if netstat -an | grep "5432" > /dev/null; then
              echo "Cloud SQL Proxy started!"
              break
            fi
            sleep 1
          done

          go build -o server main.go
          ./server &

          sleep 10


      - name: 'Install Migrate CLI'
        run: |
          curl -L -o migrate.linux-amd64.tar.gz https://github.com/golang-migrate/migrate/releases/download/v4.14.1/migrate.linux-amd64.tar.gz
          CHECKSUM="b92fe73d3fc9ea2bd1e02c5b7840c16268e78956c0c05f6bdb90a78c42637020"
          echo "$CHECKSUM  migrate.linux-amd64.tar.gz" | sha256sum --check
          if [[ $? -ne 0 ]]; then
            echo "Checksum verification failed!"
            exit 1
          fi
          tar xvz -f migrate.linux-amd64.tar.gz
          mv migrate.linux-amd64 /usr/local/bin/migrate

      - name: Backup PostgreSQL Database
        run: |
          TIMESTAMP=$(date --utc +%Y-%m-%dT%H:%M:%SZ)  # store current UTC timestamp
          gcloud sql backups create --instance=sheffessions-postgresql
          echo "BACKUP_TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

      - name: List Backups for PostgreSQL Database
        run: |
          RETRY_COUNT=0
          MAX_RETRIES=5
          SLEEP_DURATION=30
          while [[ -z "$BACKUP_ID" && $RETRY_COUNT -lt $MAX_RETRIES ]]; do
            BACKUP_ID=$(gcloud sql backups list --instance=sheffessions-postgresql --filter="startTime>'$BACKUP_TIMESTAMP'" --sort-by="~creationTimestamp" --limit=1 --format="get(id)")
            if [[ -z "$BACKUP_ID" ]]; then
              echo "Backup not found for attempt $((RETRY_COUNT+1)). Retrying in $SLEEP_DURATION seconds..."
              sleep $SLEEP_DURATION
              ((RETRY_COUNT++))
            fi
          done

          if [[ -z "$BACKUP_ID" ]]; then
            echo "Error: No backup found that was created after $BACKUP_TIMESTAMP after $MAX_RETRIES attempts"
            exit 1
          fi

          echo "BACKUP_ID=$BACKUP_ID" >> $GITHUB_ENV

      - name: List Migrations
        working-directory: ./backend/sheffessions_api
        run: |
          echo "MIGRATIONS_LIST=$(find db/migrations -name '*.up.sql' | grep -E '^[0-9]{6}_.+\.up\.sql$' | sort | tr '\n' ';')" >> $GITHUB_ENV

      - name: Apply Migrations Iteratively
        working-directory: ./backend/sheffessions_api
        run: |
          psql ${POSTGRESQL_URL} -t -c "SET search_path TO public;"
          IFS=';' read -ra MIGRATIONS <<< "$MIGRATIONS_LIST"
          if [[ -z "${MIGRATIONS[*]}" ]]; then
            echo "No migrations to apply."
            exit 0
          fi
          for migration in "${MIGRATIONS[@]}"; do
            if [[ $migration == *".up.sql" ]]; then
              echo "==== Applying migration: $migration ===="
              migrate -database ${POSTGRESQL_URL} -path db/migrations up 1
              if [ $? -ne 0 ]; then
                echo "Migration $migration failed. Rolling back..."
                migrate -database ${POSTGRESQL_URL} -path db/migrations down 1
                exit 1
              fi
            fi
          done

      - name: Check Database State
        if: failure()
        working-directory: ./backend/sheffessions_api
        run: |
          echo "Checking if the database is in a dirty state"
          DIRTY_STATE=$(psql ${POSTGRESQL_URL} -t -c "SELECT dirty FROM schema_migrations WHERE dirty = true LIMIT 1")
          if [[ "$DIRTY_STATE" == "true" ]]; then
            echo "The database is in a dirty state!"
            exit 1
          fi
          echo "Database is in a clean state."

  production-deploy-sheffessions_api:
    needs: [
      production-build-sheffessions_api,
      production-build-sheffessions_fe,
      production-database-migrations
    ]
    runs-on: ubuntu-latest
    env:
      POSTGRESQL_URL: postgres://postgres:${{ secrets.POSTGRESQL_PASSWORD_PRODUCTION }}@/postgres?host=/cloudsql/sheffessions:europe-west2:sheffessions-postgresql&sslmode=disable&search_path=public
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS_PRODUCTION }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      - name: 'Deploy to Cloud Run (API)'
        run: |
          gcloud run deploy sheffessions-api \
            --image=europe-docker.pkg.dev/sheffessions/sheffessions-docker-repository/sheffessions_api:sheffessions_api-${{ needs.production-build-sheffessions_api.outputs.image_tag_sheffessions_api}} \
            --region=europe-west1 \
            --platform=managed \
            --allow-unauthenticated \
            --project=sheffessions \
            --memory=128Mi \
            --cpu=1 \
            --timeout=300s \
            --concurrency=80 \
            --min-instances=0 \
            --max-instances=10 \
            --add-cloudsql-instances=sheffessions:europe-west2:sheffessions-postgresql \
            --set-env-vars=POSTGRESQL_URL=${POSTGRESQL_URL}

  production-deploy-sheffessions_fe:
    needs: [
      production-build-sheffessions_api,
      production-build-sheffessions_fe,
      production-deploy-sheffessions_api
    ] 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS_PRODUCTION }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      - name: 'Deploy to Cloud Run (API)'
        run: |
          gcloud run deploy sheffessions-fe \
            --image=europe-docker.pkg.dev/sheffessions/sheffessions-docker-repository/sheffessions_fe:sheffessions_fe-${{ needs.production-build-sheffessions_fe.outputs.image_tag_sheffessions_fe }} \
            --region=europe-west1 \
            --platform=managed \
            --allow-unauthenticated \
            --project=sheffessions \
            --memory=128Mi \
            --cpu=1 \
            --timeout=300s \
            --concurrency=80 \
            --min-instances=0 \
            --max-instances=10
