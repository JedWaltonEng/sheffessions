name: Tear Down Staging Instance

on:
  schedule:
    - cron: '0 4 * * *'  # This runs at 4 AM every day
  push:
    branches: [
      "feature/rollbacks"
    ]

jobs:
  cleanup-staging:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS_STAGING }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: Install gcloud beta components
      run: gcloud components install beta --quiet

    - name: Cleanup old Docker images
      run: |
        _cleanup() {
          image_path="$1-docker.pkg.dev/$2/$3/$4"
          tags=$(gcloud artifacts docker images list $image_path \
            --include-tags \
            --format='value(TAGS)' | \
            grep -E '^[^-]+-[0-9a-f]{40}-[0-9]{8}-[0-9]{6}$' | \
            sort -t '-' -k3,3r -k4,4r | tail -n +6)
          if [ -z "$tags" ]; then
            echo "No images to clean"
          else
            echo "Images found: $tags"
            for tag in $tags; do
              echo "Deleting image: $image_path:$tag"
              gcloud artifacts docker images delete "$image_path:$tag" --quiet
            done
          fi
        }

        location="europe"
        project_id="sheffessions-staging"
        repository_id="sheffessions-docker-repository"
        image_name="sheffessions_api_staging" # Change as needed

        _cleanup $location $project_id $repository_id $image_name

        image_name="sheffessions_fe_staging" # Change for the second cleanup

        _cleanup $location $project_id $repository_id $image_name

        echo "DONE"

    - name: 'Tear Down PostgreSQL Instance on Cloud SQL'
      run: |
        if gcloud sql instances describe sheffessions-staging-postgresql --project=sheffessions-staging > /dev/null 2>&1; then
          gcloud sql instances patch sheffessions-staging-postgresql --no-deletion-protection
          gcloud sql instances delete sheffessions-staging-postgresql --project=sheffessions-staging --quiet
        else
          echo "Cloud SQL instance sheffessions-staging-postgresql does not exist or has been deleted."
        fi

  cleanup-production:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS_PRODUCTION }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: Install gcloud beta components
      run: gcloud components install beta --quiet

    - name: Cleanup old Docker images
      run: |
        _cleanup() {
          image_path="$1-docker.pkg.dev/$2/$3/$4"
          tags=$(gcloud artifacts docker images list $image_path \
            --include-tags \
            --format='value(TAGS)' | \
            grep -E '^[^-]+-[0-9a-f]{40}-[0-9]{8}-[0-9]{6}$' | \
            sort -t '-' -k3,3r -k4,4r | tail -n +6)
          if [ -z "$tags" ]; then
            echo "No images to clean"
          else
            echo "Images found: $tags"
            for tag in $tags; do
              echo "Deleting image: $image_path:$tag"
              gcloud artifacts docker images delete "$image_path:$tag" --quiet
            done
          fi
        }

        location="europe"
        project_id="sheffessions"
        repository_id="sheffessions-docker-repository"
        image_name="sheffessions_api" # Change as needed

        _cleanup $location $project_id $repository_id $image_name

        image_name="sheffessions_fe" # Change for the second cleanup

        _cleanup $location $project_id $repository_id $image_name

        echo "DONE"
