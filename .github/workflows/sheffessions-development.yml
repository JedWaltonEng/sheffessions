name: Sheffessions development pipeline

on:
  pull_request:
    branches: [
      "development",
    ]

jobs:
  check-migrations-before-merge:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Check for migration filename prefix collisions against development
      working-directory: ./backend/sheffessions_api
      run: |
        # Explicitly fetch the development branch
        git fetch origin development
        # Get the list of all migration prefixes in the PR (i.e., current branch)
        pr_migrations_prefixes=$(ls db/migrations | cut -d'_' -f1 | sort | uniq)
        # Get the list of all migration prefixes in development
        development_migrations_prefixes=$(git ls-tree -r origin/development --name-only db/migrations | cut -d'_' -f1 | sort | uniq)
        # Compare the migration prefixes from your PR with those in development
        for prefix in $pr_migrations_prefixes; do
          if echo "$development_migrations_prefixes" | grep -q "^${prefix}$"; then
            echo "Collision detected for migration prefix: $prefix"
            echo "Please update your migration script to avoid conflicts with the development branch."
            exit 1
          fi
        done

        echo "No migration prefix collisions detected."

    - name: Check for migration filename prefix collisions within the same commit
      working-directory: ./backend/sheffessions_api
      run: |
        # Step 1: Extract all prefixes for up and down migrations
        up_migrations=$(ls db/migrations | grep ".up.sql" | cut -d'_' -f1 | sort)
        down_migrations=$(ls db/migrations | grep ".down.sql" | cut -d'_' -f1 | sort)

        # Step 2: Ensure matching pairs for every up migration
        for prefix in $up_migrations; do
          if ! echo "$down_migrations" | grep -q "^${prefix}$"; then
            echo "Missing .down.sql migration for prefix: $prefix"
            exit 1
          fi
        done

        # Step 3: Check for any true duplicates
        all_migrations=$(ls db/migrations | cut -d'_' -f1 | sort | uniq)
        for prefix in $all_migrations; do
          count=$(ls db/migrations | grep "^${prefix}_" | wc -l)
          if [ "$count" -gt 2 ]; then
            echo "Collisions detected for migration prefix: $prefix"
            echo "More than one set of .up.sql and .down.sql files share the same prefix within the same commit."
            exit 1
          fi
        done

        echo "No migration prefix collisions detected within the same commit."


  check-migrations-on-merge:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Check for migration filename prefix collisions post-merge
      working-directory: ./backend/sheffessions_api
      run: |
        # Explicitly fetch the development branch
        git fetch origin development
        # Check if branches have a common base
        merge_base=$(git merge-base HEAD origin/development)
        if [ -z "$merge_base" ]; then
          echo "The branches have unrelated histories. This can cause issues during merge."
          exit 1
        fi
        # Try merging development into the current branch (simulate what will happen post-merge)
        git merge origin/development --no-commit --no-ff --allow-unrelated-histories
        # Get the list of all migration prefixes post-merge
        merged_migrations_prefixes=$(ls db/migrations | cut -d'_' -f1 | sort | uniq)
        # Check for duplicates (collisions) within the merged list itself
        duplicates=$(echo "$merged_migrations_prefixes" | uniq -d)
        # If there are duplicates, flag them
        if [[ ! -z "$duplicates" ]]; then
          echo "Collisions detected for migration prefixes post-merge:"
          echo "$duplicates"
          echo "Please update your migration script to avoid conflicts post-merge."
          exit 1
        fi
        echo "No migration prefix collisions detected post-merge."

  unit-test-sheffessions_api:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.21'
        cache: true
        cache-dependency-path: ./backend/sheffessions_api/go.sum

    - name: Fetch dependencies
      working-directory: ./backend/sheffessions_api
      run: |
        go get -v ./...

    - name: Run backend/sheffessions_api unit tests
      working-directory: ./backend/sheffessions_api
      run: go test -v *_unit_test.go

  unit-test-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: ~/.pnpm-cache
        key: ${{ runner.OS }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.OS }}-pnpm-

    - name: Install pnpm
      run: npm install -g pnpm

    - name: Install dependencies
      working-directory: ./frontend/sheffessions
      run: pnpm install

    - name: Run frontend/sheffessions unit tests
      working-directory: ./frontend/sheffessions
      run: pnpm test:unit

  integration-test:
    needs: [
      unit-test-sheffessions_api,
      unit-test-frontend
    ]
    runs-on: ubuntu-latest
    env:
      POSTGRESQL_URL: postgres://postgres_user:mysecretpassword@localhost:5432/devdb?sslmode=disable&search_path=public
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres_user
          POSTGRES_PASSWORD: mysecretpassword
          POSTGRES_DB: devdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.21'
          cache: true
          cache-dependency-path: ./backend/sheffessions_api/go.sum

      - name: Fetch dependencies
        working-directory: ./backend/sheffessions_api
        run: go get -v ./...

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-cache
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        working-directory: ./frontend/sheffessions
        run: pnpm install

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -U postgres_user; then
              break
            fi
            echo "Waiting for PostgreSQL to be ready..."
            sleep 1
          done

      - name: Build and Run sheffessions_api
        working-directory: ./backend/sheffessions_api
        run: |
          go build -o server main.go
          ./server &

      - name: Wait for Backend to Start
        run: |
          while ! curl -s localhost:8080 > /dev/null; do
            sleep 5
          done

      - name: Run sheffessions_api Integration Tests
        working-directory: ./backend/sheffessions_api
        run: go test -v *_integration_test.go

      - name: Run Frontend Integration Tests
        working-directory: ./frontend/sheffessions
        run: |
          pnpm test:integration

      - name: Shutdown Backend
        if: always()
        run: pkill server
